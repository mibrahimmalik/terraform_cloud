# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)
 
trigger: none
 
pr: none

pool:
  vmImage: 'ubuntu-latest'


variables:
- name: svc_connection
  value: svc_devtest
  
stages:
  - stage: Terraform_Plan
    displayName: Terraform_Plan
    jobs: 
      - job: terraform_plan      
        steps:
        - script: |
            echo 'terraform version: '
            terraform version
            echo 'present working directory:'
            pwd
            ls -lrt
            export
          displayName: get info             

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          name: terraform_init
          displayName: terraform_init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: $(svc_connection)
            backendAzureRmResourceGroupName: 'ss-rg'
            backendAzureRmStorageAccountName: 'mibtfstate'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'demo.azure.tfstate'

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          name: terraform_plan
          displayName: terraform_plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-lock=false -input=false'
            environmentServiceNameAzureRM: $(svc_connection)

        - task: ArchiveFiles@2
          name: archive_artifact
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)'
            includeRootFolder: false
            archiveType: 'tar'
            tarCompression: 'gz'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
            replaceExistingArchive: true
            displayName: 'Create Plan Artifact'

        - task: PublishBuildArtifacts@1
          name: publish_artifact
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: '$(Build.BuildId)-tfplan'
            publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'

  - stage: Terraform_Apply
    displayName: Terraform_Apply
    jobs: 
      - job: terraform_apply      
        steps:
        - checkout: none

        - task: DownloadBuildArtifacts@0
          name: download_artifact
          inputs:
            artifactName: '$(Build.BuildId)-tfplan'
            displayName: 'Download Plan Artifact'

        - task: ExtractFiles@1
          inputs:
            archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/$(Build.BuildId).tgz'
            destinationFolder: '$(System.DefaultWorkingDirectory)/'
            cleanDestinationFolder: false
            displayName: 'Extract Terraform Plan Artifact'

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          name: terraform_apply
          displayName: terraform_apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '-lock=false -input=false'
            environmentServiceNameAzureRM: $(svc_connection)